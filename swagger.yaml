openapi: 3.0.3
info:
  title: Car shop OpenAPIl
  version: 0.0.01
servers:
  - url: http://127.0.0.1:8000/api/
tags:
  - name: register
    description: Registration of a new user.
  - name: dealership
    description: Available dealerships.
  - name: car
    description: List of available cars.
  - name: create orders
    description: Adding a car to the order, creating an order, payment, or deleting an order.
paths:
  /register/:
    post:
      tags:
        - register
      summary: Registration of a new user.
      description: Endpoint to create a new user
      operationId: createUser
      requestBody:
        description: Create a new user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                {"username": ["This field may not be blank."]}
  /dealership/:
    get:
      tags:
        - dealership
      summary: View the list of dealerships
      description: Endpoint to get a dealerships
      operationId: getDealerships
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dealership'
  /dealership/{id}:
    get:
      tags:
        - dealership
      summary: Get an dealerships by id
      description: Endpoint to get an dealerships by id
      operationId: get–íealershipsById
      parameters:
        - name: id
          in: path
          description: ID of the dealerships to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dealership'
        '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
                example:
                  {"detail": "Not found."}
  /car/:
    get:
      tags:
        - car
      summary: View the list of car
      description: Endpoint to get a cars
      operationId: getCars
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cars'
  /car/{id}:
    get:
      tags:
        - car
      summary: Get an car by id
      description: Endpoint to get an car by id
      operationId: getCarById
      parameters:
        - name: id
          in: path
          description: ID of the car to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
        '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
                example:
                  {"detail": "Not found."}
  /dealership/{dealer_id}/add_car/:
    get:
      tags:
        - create orders
      summary: View cars in delership
      description: Endpoint to View cars in delership
      operationId: GetCars
      parameters:
        - name: dealer_id
          in: path
          description: ID delership
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cars'
        '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
                example: {"detail": "Dealership not found."}
  /dealership/{dealer_id}/add_car/{car_id}:
    get:
      tags:
        - create orders
      summary: View cars in delership
      description: Endpoint to View car in delership
      operationId: GetCar
      parameters:
        - name: dealer_id
          in: path
          description: ID delership
          required: true
          schema:
            type: integer
            format: int64
        - name: car_id
          in: path
          description: Id car
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
        '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
                example: {"detail": "Dealership not found."}
    post:
      tags:
        - create orders
      summary: Add car in order
      parameters:
        - name: dealer_id
          in: path
          description: ID delership
          required: true
          schema:
            type: integer
            format: int64
          example: 2
        - name: car_id
          in: path
          description: Id car
          required: true
          schema:
            type: integer
            format: int64
          example: 3
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/Message'
              example: {"message": "Car 3 added in order 1",
                        "url": "/api/order/confirm/1/"}
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/Error'
              example:
                {"detail": "Authentication credentials were not provided."}
        '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
                example: {"detail": "Dealership not found."}
    delete:
      tags:
        - create orders
      summary: Delete car from order
      parameters:
        - name: dealer_id
          in: path
          description: ID delership
          required: true
          schema:
            type: integer
            format: int64
          example: 2
        - name: car_id
          in: path
          description: Id car
          required: true
          schema:
            type: integer
            format: int64
          example: 3
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/Message'
              example: {"message": "Car 3 deleted from order 1",
                        "url": "/api/order/confirm/1/"}
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/Error'
              example:
                {"detail": "Authentication credentials were not provided."}
        '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
                example: {"detail": "Dealership not found."}
  /order/confirm/{order_id}:
    get:
      tags:
        - create orders
      summary: Get your order
      description: Endpoint to ger your order
      operationId: GetOrder
      parameters:
        - name: order_id
          in: path
          description: ID delership
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/Error'
              example:
                {"detail": "Authentication credentials were not provided."}
        '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
                example: {"detail": "Order not found."}
    post:
      tags:
        - create orders
      summary: Paid your order
      description: Endpoint to paid your order
      operationId: PostOrder
      parameters:
        - name: order_id
          in: path
          description: ID delership
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/Message'
              example: {"message": "The order 1 is paid"}
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/Error'
              example:
                {"detail": "Authentication credentials were not provided."}
        '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
                example: {"detail": "Order not found."}
    delete:
      tags:
        - create orders
      summary: Delete your order
      description: Endpoint to delete your order
      operationId: DeleteOrder
      parameters:
        - name: order_id
          in: path
          description: ID delership
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/Message'
              example: {"message": "The order 1 is delete"}
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/Error'
              example:
                {"detail": "Authentication credentials were not provided."}
        '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
                example: {"detail": "Order not found."}
components:
  schemas:
    Error:
      type: object
      properties:
        detail:
          type: string
          example: "Not found."
    Message:
      type: object
      properties:
        message:
          type: string
          example: "Car added in order"
        url:
          type: string
          example:
            type: string
            example: "/api/order/confirm/5/"
    User:
      required:
        - username
        - password
        - email
      type: object
      properties:
        username:
          type: string
          example: "User"
        password:
          type: string
          example: "password"
        email:
          type: string
          example: "user@example.com"
    UserResponse:
      required:
        - username
        - email
      type: object
      properties:
        username:
          type: string
          example: "User"
        email:
          type: string
          example: "user@example.com"
    Dealership:
      required:
        - id
        - name
        - available_car
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "DealershipName"
        available_car:
          $ref: '#/components/schemas/Car'
    CarType:
      required:
        - id
        - brand
        - model
        - price
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 3
        brand:
          type: string
          example: "Volkswagen"
        model:
          type: string
          example: "Touareg"
        price:
          type: integer
          format: int64
          example: 30000
    CarTypes:
      type: array
      items:
        $ref: '#/components/schemas/CarType'
    Car:
      required:
        - id
        - car_type
        - color
        - year
        - photo
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 5
        car_type:
          $ref: '#/components/schemas/CarType'
        color:
          type: string
          example: "Black"
        year:
          type: string
          example: "2024"
        photo:
          type: string
          example: "url.photo"
    Cars:
      type: array
      items:
        $ref: '#/components/schemas/Car'
    Order:
      required:
        - id
        - user
        - dealership
        - car_types
        - total
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        user:
          type: integer
          format: int64
          example: 1
        dealership:
          type: integer
          format: int64
          example: 1
        car_types:
          $ref: '#/components/schemas/CarTypes'
        total:
          type: integer
          format: int64
          example: 50000